/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Presentación;

import Entidad.ClsEKardex;
import Entidad.ClsEProducto;
import Negocio.ClsNKardex;
import Negocio.ClsNProducto;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import javax.swing.JOptionPane;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;

/**
 *
 * @author Usuario
 */
public class FrmImprimir extends javax.swing.JInternalFrame {

    /**
     * Creates new form FrmImprimir
     */
    public static String[][] vecProd=new String[100][100];
    public FrmImprimir() {
        initComponents();
        try {
            this.setMaximum(true);
        
        } catch (Exception e) {
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        rbtnUno = new javax.swing.JRadioButton();
        rbtnCompleto = new javax.swing.JRadioButton();
        btnImprimir = new javax.swing.JButton();

        buttonGroup1.add(rbtnUno);
        rbtnUno.setText("UN SOLO PRODUCTO");

        buttonGroup1.add(rbtnCompleto);
        rbtnCompleto.setText("KARDEX COMPLETO");

        btnImprimir.setText("IMPRIMIR");
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(148, 148, 148)
                        .addComponent(rbtnUno)
                        .addGap(97, 97, 97)
                        .addComponent(rbtnCompleto))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(262, 262, 262)
                        .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(417, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(108, 108, 108)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtnUno)
                    .addComponent(rbtnCompleto))
                .addGap(34, 34, 34)
                .addComponent(btnImprimir, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(341, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        if(rbtnUno.isSelected())
        {
            String codigo=JOptionPane.showInputDialog("INGRESE CODIGO DE BARRAS");
            ClsEProducto objEE=new ClsEProducto();
            ClsNProducto objNE=new ClsNProducto();
            ClsNKardex objNEE=new ClsNKardex();
            
            objEE.setCBarras(codigo);
            Principal.ayuda=1;  
            if(objNE.MtdBuscarProducto(objEE)==true)
            {
                int cont=0;
                for(ClsEKardex objEEE : objNEE.MtdListarKardex2(codigo))
                {          
                    vecProd[cont][0]=objEEE.getOperacion();
                    vecProd[cont][1]=String.valueOf(objEEE.getCantidad());
                    vecProd[cont][2]=objEEE.getFecha();
                    vecProd[cont][3]=objEEE.getNombreProv();
                    vecProd[cont][4]=objEEE.getDescripcionDoc();
                    vecProd[cont][5]=String.valueOf(objEEE.getStock());
                    cont++;
                }
                try {    
                FileOutputStream archivo=new FileOutputStream("src\\Kardex\\Uno.pdf");
                Document documento=new Document();
                PdfWriter.getInstance(documento, archivo);
                documento.open();
                Paragraph parraf=new Paragraph("                                                             KARDEX");
                documento.add(Chunk.NEWLINE);

                Paragraph parrafo=new Paragraph("Código: "+codigo);
//                parrafo.setAlignment(1);
                documento.add(parraf);
                documento.add(parrafo);
                
                Image image=null;   //trabajamos con logo
                try {
                    image=Image.getInstance("src\\Kardex\\logo.png");
                    image.scaleAbsolute(110, 60); //cambiamos tamaño
                    image.setAbsolutePosition(470, 770); //posicion
                } catch (Exception e) {
                }
                documento.add(image); //agregamos imagen al documento
                documento.add(Chunk.NEWLINE);
                documento.add(new Paragraph("Stock mínimo: "+objEE.getsMinimo()+"                        Producto: "+objEE.getNombre()+" X"+objEE.getuCajas()+" "+objEE.getDescripcionUnidad()));
                documento.add(Chunk.NEWLINE);
                documento.add(new Paragraph("Stock Máximo: "+objEE.getsMaximo()+"                     Proveedor: "+vecProd[0][3]+"                      Unidad: "+objEE.getDescripcionUnidad()));
                documento.add(Chunk.NEWLINE);
                PdfPTable tabla=new PdfPTable(5);
                tabla.setWidthPercentage(100);
                PdfPCell fecha=new PdfPCell(new Phrase("FECHA"));  //AGREGAMOS COLUMNAS
                fecha.setBackgroundColor(BaseColor.ORANGE);
                PdfPCell docume=new PdfPCell(new Phrase("DOCUMENTO"));  //AGREGAMOS COLUMNAS
                docume.setBackgroundColor(BaseColor.ORANGE);
                PdfPCell operacion=new PdfPCell(new Phrase("OPERACION"));  //AGREGAMOS COLUMNAS
                operacion.setBackgroundColor(BaseColor.ORANGE);
                PdfPCell cantidad=new PdfPCell(new Phrase("CANTIDAD"));  //AGREGAMOS COLUMNAS
                cantidad.setBackgroundColor(BaseColor.ORANGE);
                PdfPCell saldo=new PdfPCell(new Phrase("SALDO"));  //AGREGAMOS COLUMNAS
                saldo.setBackgroundColor(BaseColor.ORANGE);

                tabla.addCell(fecha);
                tabla.addCell(docume);
                tabla.addCell(operacion);
                tabla.addCell(cantidad);
                tabla.addCell(saldo);              

                for(int i=0;i<=cont-1;i++)
                {
                    tabla.addCell(vecProd[i][2]);
                    tabla.addCell(vecProd[i][4]);
                    tabla.addCell(vecProd[i][0]);
                    tabla.addCell(vecProd[i][1]);
                    tabla.addCell(vecProd[i][5]);
                }
                documento.add(tabla);
                
                documento.close();
                    try {
                    File path = new File ("src\\Kardex\\uno.pdf");
                    Desktop.getDesktop().open(path);
                    }catch (IOException ex) {
                    ex.printStackTrace();
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, e);
                }
            }
            else
            {
                JOptionPane.showMessageDialog(null, "PRODUCTO NO EXISTE O SE ENCUENTRA INACTIVO");
            }           
        }
        else
        {
            int con=0;
            ClsNProducto objNE=new ClsNProducto();
            String[] datos=new String[100];
            for(ClsEProducto objE : objNE.MtdListarProducto())
            {
                datos[con]=objE.getCBarras();
                con++;
            }
             Document documento=new Document();   //fuera del for abrimos el documento
             try {
                FileOutputStream archivo=new FileOutputStream("src\\Kardex\\Uno.pdf");
                   
                    PdfWriter.getInstance(documento, archivo);
                    documento.open();
            } catch (Exception e) {
            }
            for(int i=0;i<=con-1;i++)
            {
                
                String codigo=datos[i];
                ClsEProducto objEE=new ClsEProducto();
                ClsNProducto objNES=new ClsNProducto();
                ClsNKardex objNEE=new ClsNKardex();

                objEE.setCBarras(codigo);
                Principal.ayuda=1;  
                if(objNES.MtdBuscarProducto(objEE)==true)
                {
                    int cont=0;
                    for(ClsEKardex objEEE : objNEE.MtdListarKardex2(codigo))
                    {          
                        vecProd[cont][0]=objEEE.getOperacion();
                        vecProd[cont][1]=String.valueOf(objEEE.getCantidad());
                        vecProd[cont][2]=objEEE.getFecha();
                        vecProd[cont][3]=objEEE.getNombreProv();
                        vecProd[cont][4]=objEEE.getDescripcionDoc();
                        vecProd[cont][5]=String.valueOf(objEEE.getStock());
                        cont++;
                    }
                    try {    
                    
                    Paragraph parraf=new Paragraph("                                                             KARDEX");
                    documento.add(Chunk.NEWLINE);

                    Paragraph parrafo=new Paragraph("Código: "+codigo);
    //                parrafo.setAlignment(1);
                    documento.add(parraf);
                    documento.add(parrafo);

                    Image image=null;   //trabajamos con logo
                    try {
                        image=Image.getInstance("src\\Kardex\\logo.png");
                        image.scaleAbsolute(110, 60); //cambiamos tamaño
                        image.setAbsolutePosition(470, 770); //posicion
                    } catch (Exception e) {
                    }
                    documento.add(image); //agregamos imagen al documento
                    documento.add(Chunk.NEWLINE);
                    documento.add(new Paragraph("Stock mínimo: "+objEE.getsMinimo()+"                        Producto: "+objEE.getNombre()+" X"+objEE.getuCajas()+" "+objEE.getDescripcionUnidad()));
                    documento.add(Chunk.NEWLINE);
                    documento.add(new Paragraph("Stock Máximo: "+objEE.getsMaximo()+"                     Proveedor: "+vecProd[0][3]+"                      Unidad: "+objEE.getDescripcionUnidad()));
                    documento.add(Chunk.NEWLINE);
                    PdfPTable tabla=new PdfPTable(5);
                    tabla.setWidthPercentage(100);
                    PdfPCell fecha=new PdfPCell(new Phrase("FECHA"));  //AGREGAMOS COLUMNAS
                    fecha.setBackgroundColor(BaseColor.ORANGE);
                    PdfPCell docume=new PdfPCell(new Phrase("DOCUMENTO"));  //AGREGAMOS COLUMNAS
                    docume.setBackgroundColor(BaseColor.ORANGE);
                    PdfPCell operacion=new PdfPCell(new Phrase("OPERACION"));  //AGREGAMOS COLUMNAS
                    operacion.setBackgroundColor(BaseColor.ORANGE);
                    PdfPCell cantidad=new PdfPCell(new Phrase("CANTIDAD"));  //AGREGAMOS COLUMNAS
                    cantidad.setBackgroundColor(BaseColor.ORANGE);
                    PdfPCell saldo=new PdfPCell(new Phrase("SALDO"));  //AGREGAMOS COLUMNAS
                    saldo.setBackgroundColor(BaseColor.ORANGE);

                    tabla.addCell(fecha);
                    tabla.addCell(docume);
                    tabla.addCell(operacion);
                    tabla.addCell(cantidad);
                    tabla.addCell(saldo);              

                    for(int y=0;y<=cont-1;y++)
                    {
                        tabla.addCell(vecProd[y][2]);
                        tabla.addCell(vecProd[y][4]);
                        tabla.addCell(vecProd[y][0]);
                        tabla.addCell(vecProd[y][1]);
                        tabla.addCell(vecProd[y][5]);
                    }
                    documento.add(tabla);                   
                    
                    documento.newPage();
                    
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(null, e);
                    }
                }
                else
                {
                    
                } 
            }
                documento.close();  //fuera del for cerramos documento
                    try {
                        File path = new File ("src\\Kardex\\uno.pdf");
                        Desktop.getDesktop().open(path);
                        }catch (IOException ex) {
                        ex.printStackTrace();
                        }
        }
    }//GEN-LAST:event_btnImprimirActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnImprimir;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton rbtnCompleto;
    private javax.swing.JRadioButton rbtnUno;
    // End of variables declaration//GEN-END:variables
}
